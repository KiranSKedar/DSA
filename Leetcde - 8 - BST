https://leetcode.com/problems/range-sum-of-bst/submissions/



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    void inorder(TreeNode* root, int low, int high,int &sum){
        if(root==NULL)
            return;
        
        inorder(root->left,low ,high,sum);
        
        if(root->val>=low && root->val<=high){
            sum+=root->val;
        }
        
        inorder(root->right,low ,high,sum);
        
    }
    int rangeSumBST(TreeNode* root, int low, int high) {
        
        int sum=0;
        inorder(root,low,high,sum);
        
        return sum;
        
    }
};




/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    int inorder(TreeNode* root, int low, int high,int &sum){
        if(root==NULL)
            return 0;
        
        inorder(root->left,low ,high,sum);
        
        if(root->val>=low && root->val<=high){
            return root->val +inorder(root->left,low,high,sum) +  inorder(root->right,low ,high,sum);
        }
        
        if(root->val<low)
            return inorder(root->right,low ,high,sum);
        
        else
            return  inorder(root->left,low ,high,sum);
        
    }
    int rangeSumBST(TreeNode* root, int low, int high) {
        
        // int sum=0;
       int sum=inorder(root,low,high,sum);
        
        return sum;
        
    }
};
