
https://leetcode.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters/submissions/

class Solution {
public:
    
    
    bool hasDuplicate(string &s1,string &s2){
        int arr[26]={0};
        
        for(char &ch:s1){
            if(arr[ch-'a']>0)
                return true;
            
            arr[ch-'a']++;
        }
        
        for(char &ch:s2){
            if(arr[ch-'a']>0)
                return true;
        }
        
        return false;
    }
int solve(int i, string temp,int n,vector<string> arr){
    if(i>=n)
        return temp.length();
    
    
    int include=0;
    int exclude=0;
    if(hasDuplicate(arr[i],temp)){
        
        exclude=solve(i+1,temp,n,arr);
        
    }
    
    else{
        
        exclude=solve(i+1,temp,n,arr);
        
        include=solve(i+1,temp+arr[i],n,arr);
        
    }
    
    return max(include,exclude);
    
    
}
    int maxLength(vector<string>& arr) {
        
        string temp="";
        
        int i=0;
        
        int n=arr.size();
        
        
        return solve(i,temp,n,arr);
        
    }
};



Memoiztion

class Solution {
public:
    
    unordered_map<string,int>mp;
    
    bool hasDuplicate(string &s1,string &s2){
        int arr[26]={0};
        
        for(char &ch:s1){
            if(arr[ch-'a']>0)
                return true;
            
            arr[ch-'a']++;
        }
        
        for(char &ch:s2){
            if(arr[ch-'a']>0)
                return true;
        }
        
        return false;
    }
int solve(int i, string temp,int n,vector<string> arr){
    if(i>=n)
        return temp.length();
    
    
    int include=0;
    int exclude=0;
    
    if(mp.find(temp)!=mp.end())
        return mp[temp];
    
    if(hasDuplicate(arr[i],temp)){
        
        exclude=solve(i+1,temp,n,arr);
        
    }
    
    else{
        
        exclude=solve(i+1,temp,n,arr);
        
        include=solve(i+1,temp+arr[i],n,arr);
        
    }
    
    return mp[temp]=max(include,exclude);
    
    
}
    int maxLength(vector<string>& arr) {
        mp.clear();
        string temp="";
        
        int i=0;
        
        int n=arr.size();
        
        
        return solve(i,temp,n,arr);
        
    }
};
