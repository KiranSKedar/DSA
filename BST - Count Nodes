/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int result;
    
    int sum(TreeNode *root, int &cnt){
        if(root==NULL)
            return 0;
         cnt++;
        int lsum=sum(root->left,cnt);
        int rsum=sum(root->right,cnt);
        
        return lsum+rsum+root->val;
        
    }
    void solve(TreeNode* root){
        int cnt=0;
        if(root==NULL)
            return ;
       
        int total=sum(root,cnt);
        if(total/cnt==root->val){
            result++;
        }
        solve(root->left);
        solve(root->right);
        
    }
    int averageOfSubtree(TreeNode* root) {
        result=0;
        solve(root);
        
        return result;
        
        
    }
};






2nd Approach
class Solution {
public:
    int result;
    
    pair<int, int> solve(TreeNode* root) {
        if(!root)
            return {0, 0};
        
        pair<int, int> l = solve(root->left);
        pair<int, int> r = solve(root->right);
        
        int leftSum   = l.first;
        int leftCount = l.second;
        
        int rightSum   = r.first;
        int rightCount = r.second;
        
        int SUM   = leftSum + rightSum + root->val;
        int COUNT = leftCount + rightCount + 1;
        
        int avg = SUM/COUNT;
        
        if(avg == root->val) {
            result++;
        }
        
        return {SUM, COUNT};
    }
    
    int averageOfSubtree(TreeNode* root) {
        result = 0;
        
        solve(root);
        
        return result;
    }
};
