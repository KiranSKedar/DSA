class Solution {
public:
    
    int first_Occ(vector<int>& nums, int target){
         int n=nums.size();
        int first=-1;
        int start=0,end=n-1;
        while(start<=end){
            int mid=start +(end-start)/2;
            if(nums[mid]==target){
                first=mid;
                end=mid-1;
            }
            else if(target>nums[mid])
                start=mid+1;
            else
                end=mid-1;
        }
        
        
        return first;
    }
    
    
     int last_Occ(vector<int>& nums, int target){
         int n=nums.size();
        int last=-1;
        int start=0,end=n-1;
        while(start<=end){
            int mid=start +(end-start)/2;
            if(nums[mid]==target){
                last=mid;
                start=mid+1;
            }
            else if(target>nums[mid])
                start=mid+1;
            else
                end=mid-1;
        }
        
        
        return last;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        
       
        
        
       int first=first_Occ(nums,target);
        int last=last_Occ(nums,target);
        
        return {first,last};
        
    }
};
